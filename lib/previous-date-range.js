// Generated by CoffeeScript 1.9.0
(function() {
  var PreviousDateRange, moment, _base;

  moment = this.moment || require('moment');

  PreviousDateRange = (function() {
    PreviousDateRange.attributes = ['date', 'measure', 'units', 'whole'];

    function PreviousDateRange(data) {
      this.clearCache();
      this.set(data);
    }

    PreviousDateRange.prototype.set = function(data) {
      var attr, _i, _len, _ref;
      if (data == null) {
        data = {};
      }
      _ref = this.constructor.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        if (data[attr] != null) {
          this[attr] = data[attr];
        }
      }
      return this;
    };

    PreviousDateRange.prototype.previous = function(_at_units, _at_measure, whole) {
      this.units = _at_units;
      this.measure = _at_measure;
      if (whole != null) {
        this.whole = whole;
      }
      return this;
    };

    PreviousDateRange.prototype.clearCache = function() {
      return this._cache = {};
    };

    PreviousDateRange.prototype.getRange = function(options) {
      if (options == null) {
        options = {};
      }
      console.warn('DEPRECATED: call .end, .start and .length directly on the range object');
      if (options.startingFrom) {
        console.warn('DEPRECATED: set .date directly on the range object');
        this.date = options.startingFrom;
      }
      return this;
    };

    PreviousDateRange.prototype.toJSON = function() {
      return this.constructor.attributes.reduce((function(_this) {
        return function(json, attr) {
          if (_this[attr] != null) {
            json[attr] = _this[attr];
          }
          return json;
        };
      })(this), {});
    };

    return PreviousDateRange;

  })();

  Object.defineProperty(PreviousDateRange.prototype, 'units', {
    get: function() {
      return this._units || 1;
    },
    set: function(val) {
      this.clearCache();
      return this._units = val;
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, 'measure', {
    get: function() {
      return this._measure || 'month';
    },
    set: function(val) {
      this.clearCache();
      return this._measure = val;
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, 'toDate', {
    get: function() {
      return /ToDate$/.test(this.measure);
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, "cleanMeasure", {
    get: function() {
      return this.measure.replace(/[s]?[ToDate]+$/, '');
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, "countableMeasure", {
    get: function() {
      switch (this.cleanMeasure) {
        case 'isoWeek':
          return 'week';
        default:
          return this.cleanMeasure;
      }
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, 'whole', {
    get: function() {
      if (this._whole != null) {
        return this._whole;
      } else {
        return !this.toDate;
      }
    },
    set: function(val) {
      this.clearCache();
      return this._whole = val;
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, 'date', {
    get: function() {
      return this._date;
    },
    set: function(val) {
      this.clearCache();
      return this._date = val;
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, 'end', {
    get: function() {
      var end;
      if (this._cache.end) {
        return this._cache.end;
      }
      end = moment(this.date);
      if (!this.whole) {
        end.subtract(1, 'day');
      } else {
        end.startOf(this.cleanMeasure).subtract(1, 'day').endOf(this.cleanMeasure);
      }
      end.endOf('day');
      return this._cache.end = end;
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, 'start', {
    get: function() {
      var start;
      if (this._cache.start) {
        return this._cache.start;
      }
      start = moment(this.end);
      if (!this.whole) {
        start.subtract(this.units, this.countableMeasure);
        if (this.toDate) {
          start.endOf(this.cleanMeasure);
        }
        start.add(1, 'day');
      } else {
        start.subtract(this.units - 1, this.countableMeasure).startOf(this.cleanMeasure);
      }
      start.startOf('day');
      return this._cache.start = start;
    }
  });

  Object.defineProperty(PreviousDateRange.prototype, 'length', {
    get: function() {
      return 1 + this.end.diff(this.start, 'days');
    }
  });

  if ((_base = moment.fn).previous == null) {
    _base.previous = function(units, measure, whole) {
      return new PreviousDateRange({
        date: this.clone(),
        units: units,
        measure: measure,
        whole: whole
      });
    };
  }

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    module.exports = PreviousDateRange;
  } else {
    this.PreviousDateRange = PreviousDateRange;
  }

}).call(this);
